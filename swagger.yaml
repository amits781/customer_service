swagger: "2.0"
info:
  description: "This is a producer microservice. This service takes the input as a JSOn and pushes the data into the kafka. The endpoints here are also secured and are accessible using auth tokens only."
  version: "1.0.0"
  title: "Kafka Producer"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/kafka"
tags:
- name: "customer"
  description: "Endpoints for Customer Service"
schemes:
- "http"
paths:
  /customer:
    post:
      tags:
      - "customer"
      summary: "Send a customer object to kafka"
      description: ""
      operationId: "addCustomer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "Authorization"
        type: "string"
        required: true
        x-example: "Bearer 2MFxyd0hencJl_o4ol1G4nRGSDw"
      - in: "header"
        name: "Transaction-Id"
        type: "string"
        required: true
        x-example: "1234-5678-9012-3456"
      - in: "header"
        name: "Activity-Id"
        type: "string"
        required: true
        x-example: "http://localhost:8080/kafka/customer"
      - in: "body"
        name: "body"
        description: "Customer object that needs to be added to the kafka"
        required: true
        schema:
          $ref: "#/definitions/Customer"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CustomerResponse"
          examples:
                application/json:
                  code: 201
                  status: "success"
                  message: "customer object with Transaction-Id {Tid} pushed to kafka"
        "400":
          description: "failed operation"
          schema:
            $ref: "#/definitions/CustomerErrorResponse"
          examples:
                application/json:
                  code: 400
                  status: "failed"
                  message: "Error message"
                  errorType: "ValidationException"
        "401":
          description: "failed operation"
          schema:
            $ref: "#/definitions/CustomerErrorResponse"
          examples:
                application/json:
                  code: 401
                  status: "failed"
                  message: "Error message"
                  errorType: "AuthorizationException"
        "403":
          description: "failed operation"
          schema:
            $ref: "#/definitions/CustomerErrorResponse"
          examples:
                application/json:
                  code: 403
                  status: "failed"
                  message: "Error message"
                  errorType: "AuthorizationException"
        "404":
          description: "failed operation"
          schema:
            $ref: "#/definitions/CustomerErrorResponse"
          examples:
                application/json:
                  code: 404
                  status: "failed"
                  message: "Error message"
                  errorType: "NotFoundException"
        "500":
          description: "failed operation"
          schema:
            $ref: "#/definitions/CustomerErrorResponse"
          examples:
                application/json:
                  code: 500
                  status: "failed"
                  message: "Error message"
                  errorType: "TokenException"
        "503":
          description: "failed operation"
          schema:
            $ref: "#/definitions/CustomerErrorResponse"
          examples:
                application/json:
                  code: 503
                  status: "failed"
                  message: "Error message"
                  errorType: "ServerException"
      security:
      - producer_auth: []
securityDefinitions:
  producer_auth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    description: "Auth token generated by the Auth server. Format:- Bearer {token}"
definitions:
  Address:
    type: "object"
    required:
    - "addressLine1"
    - "postalCode"
    properties:
      addressLine1:
        type: "string"
        maxLength: 5
      addressLine2:
        type: "string"
      street:
        type: "string"
      postalCode:
        type: "string"
        maxLength: 5
    xml:
      name: "Address"
  Customer:
    type: "object"
    required:
    - "customerNumber"
    - "firstName"
    - "lastName"
    - "birthdate"
    - "country"
    - "countryCode"
    - "mobileNumber"
    - "email"
    - "customerStatus"
    - "address"
    properties:
      customerNumber:
        type: "string"
        pattern: '^[a-zA-Z0-9]{10}$'
        example: "C000000001"
      firstName:
        type: "string"
        minLength: 10
        maxLength: 50
        example: "Aidyn"
      lastName:
        type: "string"
        minLength: 10
        maxLength: 50
        example: "White"
      birthdate:
        type: "string"
        pattern: '^\d{2}-\d{2}-\d{4}$'
        example: "11-11-1991"
      country:
        type: "string"
        example: "India"
      countryCode:
        maxLength: 2
        type: "string"
        example: "IN"
      mobileNumber:
        type: "string"
        pattern: '^\d{10}$'
      email:
        type: "string"
        format: "email"
        maxLength: 50
        example: "abc@xyz.com"
      customerStatus:
        type: "string"
        description: "Customer Status"
        enum:
        - "Open"
        - "Close"
        - "Suspended"
        - "Restored"
      address :
        $ref: "#/definitions/Address"
    xml:
      name: "Customer"
  CustomerErrorResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      status:
        type: "string"
      message:
        type: "string"
      errorType:
        type: "string"
  CustomerResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      status:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"